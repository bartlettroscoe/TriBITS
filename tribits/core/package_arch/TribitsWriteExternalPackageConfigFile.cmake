# @HEADER
# ************************************************************************
#
#            TriBITS: Tribal Build, Integrate, and Test System
#                    Copyright 2013 Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
# the U.S. Government retains certain rights in this software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ************************************************************************
# @HEADER


include(TribitsGeneralMacros)

include(AppendStringVar)


# @FUNCTION: tribits_write_external_package_config_file_str()
#
# Write out a ``<tplName>Config.cmake`` file into the provided directory given
# the list of include directories and libraries for an external package/TPL.
#
# Usage::
#
#   tribits_write_external_package_config_file_str(
#     <tplName>
#     <tplConfigFileStrOut>
#     )
#
# The arguments are:
#
#   ``<tplName>``: Name of the external package/TPL
#
#   ``<tplConfigFileStrOut>``: Name of variable that will contain the string
#   for the config file on output.
#
# This function reads from the varaibles ``TPL_<tplName>_INCLUDE_DIRS`` and
# ``TPL_<tplName>_LIBRARIES`` (which must already be set) and uses that
# information to produce the contents of the ``<tplName>Config.cmake`` which
# is returned as a string variable that contains IMPORTED targets the
# represent these libraries and include directories.
#
# ToDo: Flesh out more documentation for behavior as more features are added
# for handling:
#
# * ``TPL_<tplName>_LIBRARIES`` containing ``-l`` and ``-L`` arguments ...
#
# * ``TPL_<tplName>_LIBRARIES`` containing arguments other than library files
# * or ``-l`` and ``-L`` arguments and files.
#
function(tribits_write_external_package_config_file_str tplName tplConfigFileStrOut)

  #
  # A) Parse commandline arguments and setup the text of the config file
  #

  cmake_parse_arguments(
     PARSE #prefix
     ""    #options
     "OUTPUT_DIRECTORY"  #one_value_keywords
     ""    #multi_value_keywords
     ${ARGN}
     )
  tribits_check_for_unparsed_arguments()

  set(outputDir "${PARSE_OUTPUT_DIRECTORY}")

  set(configFileStr "")
  append_string_var(configFileStr
    "# Package config file for external package/TPL '${tplName}'\n"
    "#\n"
    "# Generated by CMake, do not edit!\n\n"
    )

  #
  # B) Create IMPORTED library targets from TPL_${tplName}_LIBRARIES
  #

  set(libTargets "")
  set(lastLib "")

  # Iterate through libs in reverse order setting dependencies on the libs
  # that came before them so CMake will put in right order on the link line.

  set(reversLibraries ${TPL_${tplName}_LIBRARIES})
  list(REVERSE reversLibraries)

  foreach (libentry IN LISTS reversLibraries)
    print_var(libentry)
    if (IS_ABSOLUTE "${libentry}")
      # Should be an absolute library path
      get_filename_component(full_libname "${libentry}" NAME_WLE)
      print_var(full_libname)
      # Assert is a valid lib name and get lib name
      string(LENGTH "${full_libname}" full_libname_len)
      if (full_libname_len LESS 0)
        tribits_print_invalid_lib_name(${tplName} "${full_libname}")
      endif()
      string(SUBSTRING "${full_libname}" 0 3 libPart)
      if (NOT libPart STREQUAL "lib")
        tribits_print_invalid_lib_name(${tplName} "${full_libname}")
      endif()
      string(SUBSTRING "${full_libname}" 3 -1 libname)
      print_var(libname)
      # Create IMPORTED library target
      append_string_var(configFileStr
        "add_library(${tplName}::${libname} IMPORTED GLOBAL)\n"
        "set_target_properties(${tplName}::${libname} PROPERTIES\n"
        "  IMPORTED_LOCATION \"${libentry}\")\n"
        )
      # Set dependency on previous library
      if (lastLib)
        append_string_var(configFileStr
          "add_library(${tplName}::${libname} IMPORTED GLOBAL)\n"
          "target_link_libraries(${tplName}::${libname}\n"
          "  INTERFACE ${tplName}::${lastlib})\n"
          )
      endif()
      append_string_var(configFileStr
        "\n")
      # Update for next loop
      set(lastLib ${libname})
      list(APPEND libTargets "${tplName}::${libname}")
    else()
      message(SEND_ERROR
        "ERROR: Can't handle argument '${libentry}' in list TPL_${tplName}_LIBRARIES")
    endif()
  endforeach()

  #
  # C) Create the <tplName>::all_libs
  #

  append_string_var(configFileStr
    "add_library(${tplName}::all_libs INTERFACE IMPORTED GLOBAL)\n"
    "target_link_libraries(${tplName}::all_libs\n")
  foreach (libTarget IN LISTS libTargets)
    append_string_var(configFileStr
      "  INTERFACE ${libTarget}\n")
  endforeach()
  append_string_var(configFileStr
    "  )\n\n")

  #
  # D) Set the output
  #

  set(${tplConfigFileStrOut} "${configFileStr}" PARENT_SCOPE)

endfunction()


function(tribits_print_invalid_lib_name  tplName  full_libname)
  message(SEND_ERROR
    "ERROR: TPL_${tplName}_LIBRARIES entry '${full_libname}' not a valid lib name!")
endfunction()




